`timescale 1ns / 1ps
module datapath_tb();
//parameter dataFile    = "datamem.txt"; 
//parameter instrFile    = "instrmem.txt"; 
// clock
parameter CLK_FREQ = 100e6;
real CLK_PER = (1.0 / CLK_FREQ) * 1e9;
parameter dummy_CLK_FREQ = 1000e6;
real dummy_CLK_PER = (1.0 / dummy_CLK_FREQ) * 1e9;
// Datapath 
reg clk;
reg load_enable;
reg rst;
reg [data_width-1:0] Constant_in;
reg [data_width-1:0] Data_In;
reg [4:0] funct_select;
reg [1:0] shift_sel;
reg MB_select;
reg MD_select;
reg MF_select;
reg [$clog2(depth)-1:0] Destination_select;
reg [$clog2(depth)-1:0] A_select;
reg [$clog2(depth)-1:0] B_select;
wire [data_width-1:0] Address_out;
wire [data_width-1:0] Data_out;
// Memories
reg dummy_clk;
reg POR, HS, HR;
// Data mem
reg [31:0]  DIN_data;
reg [31:0]  Address_data;
wire [31:0] DOUT_data;
wire RDY_data;
reg CE_data,WE_data;
// Instr mem
reg [31:0]  DIN_instr;
reg [31:0]  Address_instr;
wire [31:0] DOUT_instr;
wire RDY_instr;
reg CE_instr,WE_instr;
integer i;
// Instantiations
Datapath Datapath_inst(.clk(clk),.load_enable(load_enable),.rst(rst),.Constant_in(Constant_in),.Data_In(Data_In),.funct_select(funct_select),.shift_sel(shift_sel),.MB_select(MB_select),.MD_select(MD_select),.MF_select(MF_select),.Destination_select(Destination_select),.A_select(A_select),.B_select(B_select),.Address_out(Address_out),.Data_out(Data_out));
NVR_TOP Data_MEM(.A(Address_data),.DIN(DIN_data),.TM_NVCP(4'h0),.CE(CE_data), .HR(HR), .HS(HS), .MEM_ALLC(1'b0),   .NVREF_EXT(1'b0), .PEIN(1'b0), .POR(POR), .WE(WE_data),.MEM_SEL(4'd0), .DUP(1'b0), .DSCLK(1'b0), .DRSTN(1'b1), .DSI(1'b0), .DSO(), .CLK4M(),.DOUT(DOUT_data),.RDY(RDY_data));
NVR_TOP Instr_MEM(.A(Address_instr),.DIN(DIN_instr),.TM_NVCP(4'h0),.CE(CE_instr), .HR(HR), .HS(HS), .MEM_ALLC(1'b0),   .NVREF_EXT(1'b0), .PEIN(1'b0), .POR(POR), .WE(WE_instr),.MEM_SEL(4'd0), .DUP(1'b0), .DSCLK(1'b0), .DRSTN(1'b1), .DSI(1'b0), .DSO(), .CLK4M(),.DOUT(DOUT_instr),.RDY(RDY_instr));
always #(CLK_PER/2) clk = ~clk;
always #(dummy_CLK_PER/2) dummy_clk = ~dummy_clk;
always @* begin
  Address_instr = Address_out;
  Address_data =  Address_out;
  DIN_data = Data_out;
  DIN_instr = Data_out;
end
    initial
	begin
		$timeformat(-6,6," us");
		//$readmemb(instrFile, Instr_MEM.XNVR._SR_MEMORY, 0, 127);
        	//$readmemb(dataFile, Data_MEM.XNVR._SR_MEMORY, 0, 127); 
		//$display("%.1fns XNVR %m : INFO : Loading Initial File ... %s \n", $realtime, initFile);
		sys_reset;	
		// --------- Write your stimulus here --------- //
 		WE_data = 1'b0;
		CE_data = 1'b0;
		WE_instr = 1'b0;
		CE_instr = 1'b0;
		for(i=5; i<10; i=i+1) begin
		    write_data(i*2,i);
		    write_instr(i+10,i);
		end
		for(i=5; i<10; i=i+1) begin
		    read_data(i);
	            read_instr(i);
		end
		// ------------------------------------------- //
		$finish();
	
	end
   task sys_reset;
	// Description: Apply a low-active reset pulse
		begin
			POR= 0;
			$display("Applying system reset at %t",$time);
			#10;
			POR = 1;
			#10;
			POR = 0;
			#10;
		end
	endtask
    task read_data(input [31:0] address);
	begin
	#20;
	CE_data = 1; 
 	Address_data = address;
        @(posedge RDY_data)    
		$display("Data:%d resides in the Data Memory address: %d at %t.",DOUT_data,Address_data,$time);       
        CE_data = 0;
	end
    endtask
    task read_instr(input [31:0] address);
    begin
        #20;
        CE_instr = 1; 
 	Address_instr = address;
        @(posedge RDY_instr)    
        	$display("Data:%d resides in the Instruction Memory address: %d at %t.",DOUT_instr,Address_instr,$time);       
        CE_instr = 0;
    end
    endtask
    task write_data(input [31:0] data_in, input [31:0] address);
	begin
	WE_data = 1; 
	Address_data = address;
	DIN_data = data_in;
	#10;
	CE_data = 1;
	@(posedge RDY_data) 
	CE_data = 0;
        WE_data = 0;
	end
    endtask
    task write_instr(input [31:0] data_in, input [31:0] address);
    begin
	WE_instr = 1;
 	Address_instr = address;
	DIN_instr = data_in;
        #10;
        CE_instr = 1; 
	@(posedge RDY_instr)  
	CE_instr = 0;
        WE_instr = 0;
    end
    endtask
endmodule
